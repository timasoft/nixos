# Project Directory Structure:
.
├── .gitattributes
├── .gptree_config
├── configuration/
│   ├── fileSystems.nix
│   ├── homepage.nix
│   ├── llama-cpp.nix
│   ├── nvidia.nix
│   ├── ollama.nix
│   └── searx.nix
├── configuration.nix
├── flake.lock
├── flake.nix
├── gptree_output.txt
├── hardware-configuration.nix
├── home/
│   ├── 050010Theme/
│   │   ├── gtk-3.0/
│   │   │   ├── assets/
│   │   │   │   ├── bullet-symbolic.svg
│   │   │   │   ├── bullet-symbolic.symbolic.png
│   │   │   │   ├── bullet@2-symbolic.symbolic.png
│   │   │   │   ├── check-symbolic.svg
│   │   │   │   ├── check-symbolic.symbolic.png
│   │   │   │   ├── check@2-symbolic.symbolic.png
│   │   │   │   ├── dash-symbolic.svg
│   │   │   │   ├── dash-symbolic.symbolic.png
│   │   │   │   ├── dash@2-symbolic.symbolic.png
│   │   │   │   ├── devel-symbolic.svg
│   │   │   │   ├── slider-horz-scale-has-marks-above-dark.png
│   │   │   │   ├── slider-horz-scale-has-marks-above-dark@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-above-disabled-dark.png
│   │   │   │   ├── slider-horz-scale-has-marks-above-disabled-dark@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-above-disabled.png
│   │   │   │   ├── slider-horz-scale-has-marks-above-disabled@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-above.png
│   │   │   │   ├── slider-horz-scale-has-marks-above@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-dark.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-dark@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-disabled-dark.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-disabled-dark@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-disabled.png
│   │   │   │   ├── slider-horz-scale-has-marks-below-disabled@2.png
│   │   │   │   ├── slider-horz-scale-has-marks-below.png
│   │   │   │   ├── slider-horz-scale-has-marks-below@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-dark.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-dark@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-disabled-dark.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-disabled-dark@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-disabled.png
│   │   │   │   ├── slider-vert-scale-has-marks-above-disabled@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-above.png
│   │   │   │   ├── slider-vert-scale-has-marks-above@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-dark.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-dark@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-disabled-dark.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-disabled-dark@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-disabled.png
│   │   │   │   ├── slider-vert-scale-has-marks-below-disabled@2.png
│   │   │   │   ├── slider-vert-scale-has-marks-below.png
│   │   │   │   ├── slider-vert-scale-has-marks-below@2.png
│   │   │   │   ├── text-select-end-dark.png
│   │   │   │   ├── text-select-end-dark@2.png
│   │   │   │   ├── text-select-end.png
│   │   │   │   ├── text-select-end@2.png
│   │   │   │   ├── text-select-start-dark.png
│   │   │   │   ├── text-select-start-dark@2.png
│   │   │   │   ├── text-select-start.png
│   │   │   │   └── text-select-start@2.png
│   │   │   ├── gtk-dark.css
│   │   │   ├── gtk.css
│   │   │   └── thumbnail.png
│   │   ├── gtk-4.0/
│   │   │   ├── assets/
│   │   │   │   ├── bullet-symbolic.svg
│   │   │   │   ├── bullet-symbolic.symbolic.png
│   │   │   │   ├── bullet@2-symbolic.symbolic.png
│   │   │   │   ├── check-symbolic.svg
│   │   │   │   ├── check-symbolic.symbolic.png
│   │   │   │   ├── check@2-symbolic.symbolic.png
│   │   │   │   ├── dash-symbolic.svg
│   │   │   │   ├── dash-symbolic.symbolic.png
│   │   │   │   ├── dash@2-symbolic.symbolic.png
│   │   │   │   └── devel-symbolic.svg
│   │   │   ├── gtk-dark.css
│   │   │   ├── gtk.css
│   │   │   ├── libadwaita-tweaks.css
│   │   │   └── libadwaita.css
│   │   └── index.theme
│   ├── fish.nix
│   ├── flatpak.nix
│   ├── kitty.nix
│   ├── nvim.nix
│   └── theme.nix
└── home.nix

# BEGIN FILE CONTENTS

# File: flake.nix

{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05";
    nixpkgs-unstable.url = "github:NixOS/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager/release-25.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    nixvim.url = "github:nix-community/nixvim/nixos-25.05";
    nixvim.inputs.nixpkgs.follows = "nixpkgs";
    aagl.url = "github:ezKEa/aagl-gtk-on-nix/release-25.05";
    aagl.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, nixpkgs-unstable, home-manager, nixvim, aagl, ... }:
  let
    system = "x86_64-linux";
    pkgs = import nixpkgs { inherit system; config.allowUnfree = true; };
    unstablePkgs = import nixpkgs-unstable { inherit system; config.allowUnfree = true; };
  in {
    nixosConfigurations.timofey = nixpkgs.lib.nixosSystem {
      inherit system;
      modules = [
        ./configuration.nix
        home-manager.nixosModules.home-manager
        {
          home-manager.useGlobalPkgs = true;
          home-manager.useUserPackages = true;
        }
        {
          imports = [ aagl.nixosModules.default ];
          programs.anime-game-launcher.enable = true;
        }
      ];
      specialArgs = {
        unstable = unstablePkgs;
        stable = pkgs;
      };
    };

    homeConfigurations.tima = home-manager.lib.homeManagerConfiguration {
      inherit pkgs;
      extraSpecialArgs = {
        unstable = unstablePkgs;
      };
      modules = [
        nixvim.homeManagerModules.nixvim
        ./home.nix
        ];
    };
  };
}


# END FILE CONTENTS


# File: hardware-configuration.nix

# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/e365f7be-5925-4e8a-9518-de5e437fbd28";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D935-8850";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/69e038cc-989d-4ce5-970d-a025c3f9e0ec"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


# END FILE CONTENTS


# File: configuration/ollama.nix

{
  services.ollama = {
    enable = true;
    models = "/mnt/nvme/ollama/models";
    acceleration = "cuda";
    user = "ollama";
  };
  services.open-webui = {
    enable = true;
    host = "0.0.0.0";
  };
}


# END FILE CONTENTS


# File: configuration/searx.nix

{ config, pkgs, ... }:

let
  baseUrl = "http://10.1.1.195:8888";
  secret = builtins.hashString "sha256" (toString config.networking.hostId);
in
{
  services.searx = {
    enable = true;
    package = pkgs.searxng;

    redisCreateLocally = true;

    runInUwsgi = false;

    settings = {
      server = {
        bind_address = "0.0.0.0";
        port = 8888;
        base_url = baseUrl;
        public_instance = false;
        image_proxy = true;
        secret_key = secret;
      };

      general = {
        instance_name = "searxng-local";
        enable_metrics = false;
      };

      search = {
        formats = [ "html" "json" "rss" ];
        autocomplete = "duckduckgo";
      };
    };
  };
}


# END FILE CONTENTS


# File: .gitattributes

*.css linguist-detectable=false


# END FILE CONTENTS


# File: configuration/fileSystems.nix

{
  fileSystems."/mnt/nvme" = {
    device = "/dev/disk/by-uuid/f6be5257-503c-49d2-b856-939e08dc73d5";
    fsType = "btrfs";
    options = [ "noatime" "ssd" ];
  };

  fileSystems."/mnt/archroot" = {
    device = "/dev/disk/by-uuid/f5e0ce07-1227-4fcb-8674-a5412e784f90";
    fsType = "btrfs";
    options = [ "subvol=@" "noatime" "ssd" ];
  };

  fileSystems."/mnt/archhome" = {
    device = "/dev/disk/by-uuid/f5e0ce07-1227-4fcb-8674-a5412e784f90";
    fsType = "btrfs";
    options = [ "subvol=@home" "noatime" "ssd" ];
  };
}


# END FILE CONTENTS


# File: home/flatpak.nix

{ config, pkgs, ... }:

{
  systemd.user.services."flatpak-update-all" = {
    serviceConfig = {
      Type = "oneshot";
      Description = "Flatpak: update all user apps";
      ExecStart = "${pkgs.flatpak}/bin/flatpak update -y --user";
    };
  };

  systemd.user.timers."flatpak-update-all" = {
    timerConfig = {
      OnCalendar = "daily";
      RandomizedDelaySec = "1h";
      Persistent = true;
    };
    unitConfig = {
      Unit = "flatpak-update-all.service";
    };
  };
}



# END FILE CONTENTS


# File: configuration/homepage.nix

{
  services.nginx.enable = true;

  services.nginx.virtualHosts."homepage.local" = {
    listen = [ { addr = "0.0.0.0"; port = 80; } ];

    locations."/".proxyPass = "http://127.0.0.1:8082";
  };

  services.homepage-dashboard = {
    enable = true;

    allowedHosts = "localhost:8082,127.0.0.1:8082,10.1.1.195:8082";

    listenPort = 8082;

    customCSS = ''
      body, html {
        font-family: Monocraft, sans-serif !important;
      }
    '';

    widgets = [
      {
        resources = {
          cpu = true;
          disk = "/";
          memory = true;
        };
      }
      {
        search = {
          provider = "custom";
          url = "http://10.1.1.195:8888/search?q=";
          target = "_blank";
          suggestionUrl = "http://10.1.1.195:8888/autocompleter?type=list&q=";
          showSearchSuggestions = true;
        };
      }
    ];

    bookmarks = [
      {
        Dev = [
          {
            GitHub = [
              {
                abbr = "GH";
                href = "https://github.com/";
                icon = "https://cdn.simpleicons.org/github";
              }
            ];
          }
          {
            NixPkgs = [
              {
                abbr = "NP";
                href = "https://search.nixos.org/";
                icon = "https://cdn.simpleicons.org/nixos";
              }
            ];
          }
          {
            NixSearch = [
              {
                abbr = "NS";
                href = "https://mynixos.com/search/";
                description = "Search for NixOS options";
                icon = "https://cdn.simpleicons.org/nixos";
              }
            ];
          }
          {
            SimpleIcons = [
              {
                abbr = "SI";
                href = "https://simpleicons.org/";
                description = "Search for simple icons";
                icon = "https://cdn.simpleicons.org/simpleicons";
              }
            ];
          }
          {
            CratesIO = [
              {
                abbr = "Cio";
                href = "https://crates.io/";
                description = "Search for crates (for rust)";
                icon = "https://raw.githubusercontent.com/rust-lang/crates.io/refs/heads/main/public/favicon.ico";
              }
            ];
          }
        ];
      }
      {
        Entertainment = [
          {
            YouTube = [
              {
                abbr = "YT";
                href = "https://www.youtube.com/";
                icon = "https://cdn.simpleicons.org/youtube";
              }
            ];
          }
          {
            AnimeGO = [
              {
                abbr = "Ani";
                href = "https://animego.me/";
                icon = "https://animego.me/favicon.ico";
              }
            ];
          }
          {
            KinoPoisk = [
              {
                abbr = "KP";
                href = "https://hd.kinopoisk.ru/";
                icon = "https://cdn.simpleicons.org/kinopoisk";
              }
            ];
          }
        ];
      }
      {
        Social = [
          {
            Reddit = [
              {
                abbr = "RE";
                href = "https://www.reddit.com/";
                icon = "https://cdn.simpleicons.org/reddit";
              }
            ];
          }
        ];
      }
    ];

    services = [
      {
        "AI" = [
          {
            "Open Web-UI" = {
              description = "Chat with AI";
              href = "http://10.1.1.195:8080";
              icon = "https://cdn.jsdelivr.net/gh/open-webui/open-webui@master/static/favicon.png";
            };
          }
          {
            "ComfyUI" = {
              description = "Needs manual start";
              href = "http://10.1.1.195:8188";
            };
          }
        ];
      }
      {
        "Search" = [
          {
            "SearXNG" = {
              description = "Powerful search";
              href = "http://10.1.1.195:8888";
              icon = "https://cdn.simpleicons.org/searxng";
            };
          }
          {
            "SearXNG Settings" = {
              description = "Load settings for SearXNG";
              href = "http://10.1.1.195:8888/preferences?preferences=eJx1WMuO67gR_Zp4I4wxyQ0SZOFVgNkmQGYvUGRJ4hXFUvNhW_31OdSTbPVd2LAOxWKxnqcsRaCOnSb_6MiSE-ZmhO2i6OghDB5YCkMPF28iBpY8ToYCPVSUQ_p0fGvFU0u2tSPP5knucdMjdteT4_f8-NNFuo0UelaP__7nf3_evGjJk3Cyf_x-Cz2N9PA6Sb1BQDTB15Bl6VUH0Tz-EMbTTbE-pbPA451dd1u31T7MULAxQg43STaQq4XRnR3xez1eqKewklS9nbtK_Yjk5lrbOugAASuobautDpAqHRuz7l-3Jb3kaq0ZkgzJTXzPYaDZPxS1Ahe4RWfqlt0oQtC2e0yOQphvSnvRGChBttMW5v7xj983wfVm-b_87d__6kRX156lFqYaSWkBUMg22rp-akXs07PihioPdwx1vRj7C1otr36_oxJRaayN0WuZlgy9hVVOi1wPYSYoWRlt47uaYNp0CA4Lac1a4aukuX5SXbfarOdbDxHw3PIwDdWonWOXvTDBXRW-kyKu2CkQQErs8l3QMr-YH3LVGqFVvADV-nq2bYUHodtd8EsPeko2LXbrIPsIj5_WAtQgtils-5qpKXYEpbvuVH9x011KeVe5FNlTO3ByLyPMXUIMR9Ua4UjoXKCcECMtOUKQbkci-rwHiFiQOuEr9lJPjdTI9s40fXm8WiKByS-Hd2R06bA536mIPpE6R1wo8kEE7U_1leoqxHjKD83W55uTMNzuGs_J5EqEMraWOBjFBBH4BoI8oZnyd_76zvTHkSr0IowoFjnsCDHNbXjBopXSDhmZcnO1YOu0HbTIA6mdZ3VepyP92SPpc8QG5m1_h6ogmt0drKgh151rBI_zuD8zKzhV5bKYO9xyMmKuRobXfBYavWicSF_b_h4JRm510QrQe_-1yNketKkm9uHwox676LILaiuyUxDrDr6a8xc-9KyzVwyN41zhImNMXk1Kfqk96xvRk_vVWtLoV2tJMoz6zbKGBdxcJY_7FGR7Mn3-ti2d0P4ut5BnO3SCPLgNNz7Q3e2mGwWqi2L7C52P5V74PojumzcoCDkJu8vTKRcRZZVBdB8of_ZFDo-vsTE5YFNTxCeztp32gLGzEFkBicY8hUJjLfIkgytY4FkkCKvZU15ueCJ7mG6PwgQ6gofOw9Zirv1e3FB6rml7gNdici6tR3-_rSg3U2xQGp_bgR9RuKKgL8D1oI-XsCF_z-muD5USnIPreePsU9POce44XoDrKSu8X-Ww5gq_SKLsnGVTKDXf92zZC82kf-vZ0AVfNUuVo0pfBzriWlpWXmKXcHmBR8F1YUrcKdM78DBzYN_zkGJyd2NI-kOGKC6Zo5vSs-iZy5LcFIX_xaZ1YkTH78vwm1FvUU-r4NDaDZiPKir0jx__fJ_6ePq0Yiz280-i4YpcfbDhRcxYxLsr8ikB170rfN16damLzdzRuNeJiciF2OQptFQAZM6QmuyLmmxpFmW3TM9XZVxEEcglGjAkj4zLsRc7ZfVwJumL33pgixSp_GzZzqnL7YtI8uHL_VboGskLfI1kuE8WeeSfXaoJ2VZ0vZCabLL4l2r4ZK0WFrhzKAwFPQxss-2pyY-gBWW6RScJxOpskWXaWjBstByw8O2yN7K_IMjXSy3oSk7T4XtV1W_2OSDcWz_zDGvAdKUYp5PmNBpFE5-C_tmuZIi2-4ZeJrTwy4JcVE0lGPHoc-aCYqhRBZDtOciJBFR93EkHge_pjLCcM1fB2w70qmO2dtErWytukeEvStngTg1QD37uDPrAwjwyOo_NgrZVjpPme3FojZZDTlSgvo7-9AII1XnvbqM85x03MnW534YX-m_Y5b4b_k3ZzakauGnWKzHCkUvZkHp5frB0WPF3vZPFPnaI2a4VB4HPkCoRYE_Bf7O0FId9QY-qOY34U6Pmn48DTCi8L2kRHbU5Nxec0T3LWq5OOvNexpDT9uhHg6adimLoRS_YHxC7Arz6vMBptX0NzR3eFdtIUK6DShGXbATliCiA9u_cf1KpBp_7JozTmLT3VZ0GevJ5okwpBDPPLs_35TrnrSadXNSIjEdOjNz3IdW596nUqn-leBTariF2zrbnmbEZ06GZnvO0l5mFqZRRuELfc5pvWpPASA6Oxy-fj2AwvNLhUpIdYVx151mOQ0iTC6KVyeetY9Ji53YZs4mogWUIgHjIgVGlWsOvvXb6ITbRhrgTl4hxIvojUJT2Mnp_n-bQ8x5dB4P50rEO-Nq1MEmNmc5stMIU59ap4WA7RWZE65Gsvs9H3MRyykNnjl_6-4EcM67QBtUrxW722lOPxZ8nqaE0zIP_OtgWxyXgI3KZiQlcO-EFnUgu89Yv4DPQACcFC16fXk1NZWGbpYQnz18YZEITOUWC3i_2zxcvcZkvfvnbKF9avHQ6S2kZPtlS2aVUogy7_stEPGnDIfPq-7U03lO1ENxdZ7vmOI4ms8JlKFqA6x1X-HK7FS6ciJp6TpJN-Hv2L880dPeOszkGjIfQBzAYroxjJTHH33yTiajy_sGiXv-_fIHu0EK2XC17kkP67ZbJv05_GTp012dGg3YBUhgZUeJ5DX0UBDQjvBgWG6Qxdnt1SXnT1tq2fMPYgGL7-D9aNT5g";
              icon = "https://cdn.simpleicons.org/searxng";
            };
          }
        ];
      }
    ];
  };
}


# END FILE CONTENTS


# File: home/fish.nix

{
  programs.fish = {
    enable = true;
    shellInit = ''
      set -g fish_greeting ""
      zoxide init fish | source

      function y
          set tmp (mktemp -t "yazi-cwd.XXXXXX")
          yazi $argv --cwd-file="$tmp"
          if read -z cwd < "$tmp"; and [ -n "$cwd" ]; and [ "$cwd" != "$PWD" ]
              builtin cd -- "$cwd"
          end
          rm -f -- "$tmp"
      end
    '';
    loginShellInit = ''
      if not contains $HOME/.local/bin $fish_user_paths
        set -U fish_user_paths $HOME/.local/bin $fish_user_paths
      end
    '';
    shellAliases = {
      ls = "eza";
    };
  };
}


# END FILE CONTENTS


# File: home.nix

{ config, pkgs, unstable, ... }:

{
  home.stateVersion = "25.05";
  home.username = "tima";
  home.homeDirectory = "/home/tima";

  home.packages = with pkgs; [
    pipx
    lazygit
    neovide
    yandex-music
    telegram-desktop
    prismlauncher
    unstable.discord
    unstable.betterdiscordctl
    nvtopPackages.nvidia
  ];

  imports = [
    ./home/nvim.nix
    ./home/flatpak.nix
    ./home/theme.nix
    ./home/kitty.nix
    ./home/fish.nix
  ];

  programs.git = {
    enable = true;
    userName = "timasoft";
    userEmail = "tima.klester@yandex.ru";
  };
}



# END FILE CONTENTS


# File: home/kitty.nix

{
  programs.kitty = {
    enable = true;

    settings = {
      font_family = "Monocraft Nerd Font";
      font_size = 10;
      scrollback_lines = -1;
      enable_audio_bell = false;
      background = "#050010";
      foreground = "#ddffff";
      background_opacity = 0.95;
      window_padding_width = 3;
    };

    enableGitIntegration = true;

    shellIntegration.enableFishIntegration = true;
  };
}


# END FILE CONTENTS


# File: flake.lock

{
  "nodes": {
    "aagl": {
      "inputs": {
        "flake-compat": "flake-compat",
        "nixpkgs": [
          "nixpkgs"
        ],
        "rust-overlay": "rust-overlay"
      },
      "locked": {
        "lastModified": 1754711696,
        "narHash": "sha256-/f9qBY5+d/mFvnb4BVHGvsJzdY+zkTmhwyVOAvu9pNc=",
        "owner": "ezKEa",
        "repo": "aagl-gtk-on-nix",
        "rev": "516c80c8744a8c4e3e6bd15bc19633cc991233a4",
        "type": "github"
      },
      "original": {
        "owner": "ezKEa",
        "ref": "release-25.05",
        "repo": "aagl-gtk-on-nix",
        "type": "github"
      }
    },
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1747046372,
        "narHash": "sha256-CIVLLkVgvHYbgI2UpXvIIBJ12HWgX+fjA8Xf8PUmqCY=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "9100a0f413b0c601e0533d1d94ffd501ce2e7885",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-parts": {
      "inputs": {
        "nixpkgs-lib": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1754091436,
        "narHash": "sha256-XKqDMN1/Qj1DKivQvscI4vmHfDfvYR2pfuFOJiCeewM=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "67df8c627c2c39c41dbec76a1f201929929ab0bd",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1753592768,
        "narHash": "sha256-oV695RvbAE4+R9pcsT9shmp6zE/+IZe6evHWX63f2Qg=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "fc3add429f21450359369af74c2375cb34a2d204",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "ref": "release-25.05",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "ixx": {
      "inputs": {
        "flake-utils": [
          "nixvim",
          "nuschtosSearch",
          "flake-utils"
        ],
        "nixpkgs": [
          "nixvim",
          "nuschtosSearch",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1748294338,
        "narHash": "sha256-FVO01jdmUNArzBS7NmaktLdGA5qA3lUMJ4B7a05Iynw=",
        "owner": "NuschtOS",
        "repo": "ixx",
        "rev": "cc5f390f7caf265461d4aab37e98d2292ebbdb85",
        "type": "github"
      },
      "original": {
        "owner": "NuschtOS",
        "ref": "v0.0.8",
        "repo": "ixx",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1744536153,
        "narHash": "sha256-awS2zRgF4uTwrOKwwiJcByDzDOdo3Q1rPZbiHQg/N38=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "18dd725c29603f582cf1900e0d25f9f1063dbf11",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-unstable": {
      "locked": {
        "lastModified": 1755027561,
        "narHash": "sha256-IVft239Bc8p8Dtvf7UAACMG5P3ZV+3/aO28gXpGtMXI=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "005433b926e16227259a1843015b5b2b7f7d1fc3",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1754937576,
        "narHash": "sha256-3sWA5WJybUE16kIMZ3+uxcxKZY/JRR4DFBqLdSLBo7w=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "ddae11e58c0c345bf66efbddbf2192ed0e58f896",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-25.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixvim": {
      "inputs": {
        "flake-parts": "flake-parts",
        "nixpkgs": [
          "nixpkgs"
        ],
        "nuschtosSearch": "nuschtosSearch",
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1754262585,
        "narHash": "sha256-Yz5dJ0VzGRzSRHdHldsWQbuFYmtP3NWNreCvPfCi9CI=",
        "owner": "nix-community",
        "repo": "nixvim",
        "rev": "ab1b5962e1ca90b42de47e1172e0d24ca80e6256",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "ref": "nixos-25.05",
        "repo": "nixvim",
        "type": "github"
      }
    },
    "nuschtosSearch": {
      "inputs": {
        "flake-utils": "flake-utils",
        "ixx": "ixx",
        "nixpkgs": [
          "nixvim",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1753771532,
        "narHash": "sha256-Pmpke0JtLRzgdlwDC5a+aiLVZ11JPUO5Bcqkj0nHE/k=",
        "owner": "NuschtOS",
        "repo": "search",
        "rev": "2a65adaf2c0c428efb0f4a2bc406aab466e96a06",
        "type": "github"
      },
      "original": {
        "owner": "NuschtOS",
        "repo": "search",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "aagl": "aagl",
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs_2",
        "nixpkgs-unstable": "nixpkgs-unstable",
        "nixvim": "nixvim"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1754575663,
        "narHash": "sha256-afOx8AG0KYtw7mlt6s6ahBBy7eEHZwws3iCRoiuRQS4=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "6db0fb0e9cec2e9729dc52bf4898e6c135bb8a0f",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}


# END FILE CONTENTS


# File: configuration/nvidia.nix

{
  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {
    modesetting.enable = true;
    powerManagement.enable = false;
    powerManagement.finegrained = false;
    open = false;
    nvidiaSettings = true;
  };
}


# END FILE CONTENTS


# File: home/nvim.nix

{ config, pkgs, lib, ... }:

{
  programs.nixvim = {
    enable = true;

    globals.mapleader = ";";

    extraPackages = with pkgs; [
      nodejs
      yarn
      python3
      ripgrep
    ];

    extraPlugins = with pkgs.vimPlugins; [
      context-vim
      neo-tree-nvim
      lazygit-nvim
      telescope-nvim
      lualine-nvim
      # barbecue-nvim
      legendary-nvim
      mini-nvim
      dressing-nvim
      nvim-colorizer-lua
      crates-nvim
      rust-vim
      coc-nvim
      coc-git
      coc-css
      coc-json
      coc-html
      coc-pyright
      coc-rust-analyzer
      coc-clangd
      coc-tsserver
      coc-yaml
      coc-toml
      minimap-vim
      llama-vim
    ];

    extraConfigLua = ''
      vim.g.neovide_opacity = 0.95
      vim.g.neovide_normal_opacity = 0.95
      vim.g.neovide_scroll_animation_length = 0.1
      vim.g.coc_global_extensions = { 'coc-discord-rpc' }
      vim.g.minimap_git_colors = 1
      vim.g.minimap_highlight_search = 1
      vim.g.minimap_auto_start = 1
      vim.g.rustfmt_autosave = 1
      vim.o.guifont = "Monocraft Nerd Font:h10"

      vim.opt.termguicolors = true
      vim.wo.number = true
      vim.o.softtabstop = 4
      vim.o.shiftwidth = 4
      vim.o.expandtab = true
      vim.o.tabstop = 4
      vim.g.mapleader = ';'

      pcall(function() require('mini.starter').setup() end)
      pcall(function() require('mini.cursorword').setup() end)
      pcall(function() require('mini.fuzzy').setup() end)
      pcall(function() require('mini.hipatterns').setup() end)
      pcall(function() require('mini.map').setup() end)
      pcall(function() require('mini.comment').setup() end)
      pcall(function() require('mini.move').setup() end)
      pcall(function() require('mini.trailspace').setup() end)

      pcall(function() require('crates').setup() end)

      pcall(function()
        local lualine = require('lualine')
        lualine.setup {
          options = {
            icons_enabled = true,
            theme = 'iceberg_dark',
            component_separators = { left = '', right = '' },
            section_separators = { left = '', right = '' },
            disabled_filetypes = { statusline = {}, winbar = {} },
            always_divide_middle = true,
            globalstatus = false,
            refresh = { statusline = 1000, tabline = 1000, winbar = 1000 }
          },
          sections = {
            lualine_a = {'mode'},
            lualine_b = {'branch', 'diff', 'diagnostics'},
            lualine_c = {'filename'},
            lualine_x = {'encoding', 'fileformat', 'filetype'},
            lualine_y = {'progress'},
            lualine_z = {'location'}
          },
          inactive_sections = {
            lualine_c = {'filename'},
            lualine_x = {'location'}
          },
        }
      end)

      pcall(function()
        local neotree = require('neo-tree')
        neotree.setup {
          filesystem = {
            filtered_items = {
              visible = true,
              hide_dotfiles = false,
              hide_gitignored = true,
            }
          }
        }
      end)

      pcall(function()
        require("colorizer").setup {
          filetypes = { "*" },
          user_default_options = {
            RGB = true,
            RRGGBB = true,
            names = true,
            RRGGBBAA = true,
            AARRGGBB = true,
            rgb_fn = true,
            hsl_fn = true,
            css = true,
            css_fn = true,
            mode = "background",
            tailwind = true,
            sass = { enable = false, parsers = { "css" },
          },
          virtualtext = "■", always_update = false },
          buftypes = {},
        }
      end)

      pcall(function() require("barbecue.ui").toggle(true) end)

      vim.api.nvim_set_keymap('i', '<Tab>', 'pumvisible() ? coc#pum#next(1) : "<Tab>"', { noremap = true, expr = true })
      vim.api.nvim_set_keymap('i', '<S-Tab>', 'pumvisible() ? coc#pum#prev(1) : "<C-h>"', { noremap = true, expr = true })
      vim.api.nvim_set_keymap('i', '<CR>', 'coc#pum#visible() ? coc#pum#confirm() : "\\<CR>"', { noremap = true, silent = true, expr = true })


      vim.keymap.set('n', '<leader>m', ':MinimapToggle<CR>', { noremap = true, silent = true })
      vim.cmd('highlight Normal guibg=#050010')
      vim.cmd('tnoremap <Esc> <C-\\><C-n>')
    '';
  };
  home.file.".config/nvim/coc-settings.json".text = ''
    {
      "rust-analyzer.check.overrideCommand": [
      "cargo",
      "clippy",
      "--workspace",
      "--message-format=json",
      "--all-targets"
      ]
    }
  '';
}


# END FILE CONTENTS


# File: home/theme.nix

{ pkgs, ... }:

let
  purpleDark = pkgs.stdenv.mkDerivation {
    pname = "050010";
    version = "1.0";
    src = ./050010Theme;
    phases = [ "installPhase" ];
    installPhase = ''
      mkdir -p $out/share/themes/050010
      cp -r $src/* $out/share/themes/050010
    '';
  };
in
{
  home.packages = [
    purpleDark
  ];

  gtk = {
    enable = true;
    font = {
      package = pkgs.monocraft;
      name = "Monocraft";
      size = 10;
    };
    cursorTheme = {
      package = pkgs.bibata-cursors;
      name = "Bibata-Modern-Classic";
      size = 24;
    };
    theme = {
      package = purpleDark;
      name = "050010";
    };
  };

  home.pointerCursor = {
    gtk.enable = true;
    x11.enable = true;
    package = pkgs.bibata-cursors;
    name = "Bibata-Modern-Classic";
    size = 24;
  };
}



# END FILE CONTENTS


# File: configuration.nix

# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, lib, pkgs, unstable,  ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./configuration/fileSystems.nix
      ./configuration/nvidia.nix
      ./configuration/ollama.nix
      ./configuration/homepage.nix
      ./configuration/searx.nix
      ./configuration/llama-cpp.nix
      # ./zapret.nix
    ];

  hardware.graphics = {
    enable = true;
    enable32Bit = true;
  };

  hardware.bluetooth = {
    enable = true;
    powerOnBoot = true;
    settings = {
      General = {
	Experimental = true;
      };
    };
  };

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "timofey"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Asia/Omsk";

  # Select internationalisation properties.
  i18n.defaultLocale = "ru_RU.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "ru_RU.UTF-8";
    LC_IDENTIFICATION = "ru_RU.UTF-8";
    LC_MEASUREMENT = "ru_RU.UTF-8";
    LC_MONETARY = "ru_RU.UTF-8";
    LC_NAME = "ru_RU.UTF-8";
    LC_NUMERIC = "ru_RU.UTF-8";
    LC_PAPER = "ru_RU.UTF-8";
    LC_TELEPHONE = "ru_RU.UTF-8";
    LC_TIME = "ru_RU.UTF-8";
  };

  security.polkit.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "ru";
    variant = "";
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.tima = {
    isNormalUser = true;
    description = "timofey";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [];
    shell = "${pkgs.fish}/bin/fish";
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    unstable.hyprland
    unstable.waybar
    swaybg
    hyprshot
    hyprlock
    zoxide
    vulkan-tools
    ly
    jq
    fd
    eza
    dust
    ncdu
    bat
    tokei
    git
    upower
    swaynotificationcenter
    kitty
    wofi
    mc
    yazi
    mangohud
    btop-cuda
    killall
    pavucontrol
    fastfetch
    gsimplecal
    cliphist
    wl-clipboard
    home-manager
    nftables
    neovim
    flatpak
    fishPlugins.tide
    hyprland-qt-support
    hyprsysteminfo
    gpu-screen-recorder-gtk
    libqalculate
    swappy
  #  wget
  ];

  fonts.packages = with pkgs; [
    monocraft
  ];

  environment.variables.EDITOR = "nvim";

  environment.sessionVariables.NIXOS_OZONE_WL = "1";
  environment.sessionVariables.QML_IMPORT_PATH = "${pkgs.hyprland-qt-support}/lib/qt-6/qml";

  environment.sessionVariables = {
    XDG_CURRENT_DESKTOP = "Hyprland";
    XDG_SESSION_DESKTOP = "Hyprland";
    XDG_SESSION_TYPE    = "wayland";
    GDK_BACKEND        = "wayland";
    QT_QPA_PLATFORM    = "wayland";
    QT_QPA_PLATFORMTHEME = "gtk3";
  };

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  programs.hyprland ={
    enable = true;
    xwayland.enable = true;
  };

  programs.firefox.enable = true;

  programs.fish.enable = true;

  programs.steam.enable = true;
  programs.gamemode.enable = true;

  programs.zoxide.enableFishIntegration = true;

  programs.gpu-screen-recorder.enable = true;

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  services.displayManager.ly.enable = true;

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "25.05"; # Did you read the comment?

}


# END FILE CONTENTS


# File: configuration/llama-cpp.nix

{ config, pkgs, ... }:

{
  environment.systemPackages = [
    (pkgs.llama-cpp.override {
      cudaSupport = true;
    })
  ];
}


# END FILE CONTENTS
